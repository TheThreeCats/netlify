+++
authors = [
    "Three Cats"
]
title = "KnapSack Pattern"
date = "2020-06-12"
description = "KnapSack Pattern tutorial"
tags = [
    "algorithm",
    "dynamic-programming",
    "java",
]
images = [
    "pair-programming.png",
]
math = true
+++

# 0/1 Knapsack Pattern
0/1 Knapsack pattern is one of the most common classical DP algorithm but it is quite interesting as many tricky algorithmic problems 
could be/are built on top of this core concept. We will study the pattern in detail, see the code and then solve some problems based on this pattern. The article outline is as follows:
* [0/1 knapsack problem](#01-knapsack-problem)
* [developing intuition](#developing-intuition)
* [code walkthrough](#knapsack-code)
* [problems](#problems)

Let us formalize our definition:  

### 0/1 knapsack problem
> #### Problem Statement: 
> `Given a Knapsack of maximum capacity` $$W$$ `and` $$N$$ `items each with its weight and value, we want to select the items to carry in the Knapsack such that the final contents has the maximum value.`

#### Understanding the problem statement: 

To solve this problem first we need to understand the concept of 0/1 which basically implies that for each item we have only **two choices** &mdash; either we pick it whole or we don't. 
Further, we **cannot break an item down to smaller chunks**. This is what the constraint `0/1` implies. Further, we have only one unit of each item i.e. no duplicates allowed.

#### An example to understand the statement better
`Consider a robber attempting to rob a place. The place has fixed number of items to steal &mdash; each having its own weight and value; From` *jewelley* **(high value, low weight)**
to *furniture* **(low value, high weight)**. `Further, the robber has a bag which can support a max weight of` $$W$$ `kg. And to state the obvious the robber can't break the jewellery or
the furniture. So how do we help our robber to steal items of maximum total value which he can still carry in his knapsack.`

if you are in a hurry you can directly go to the [knapsack code](#knapsack-code). Let us try to develop an intution for our solution.

### Developing Intuition
To facilitate our understanding we will take a small example and work our way to the solution. Suppose we are given below values for our arrays:
>
|             |   |    |    |    |
|-------------|---|----|----|----|
| itemWeights | 5 | 3  | 1  | 6  |
| itemValues  | 1 | 12 | 14 | 60 |  
  **knapsack capacity (W) = 5**  

`We are given a bag of maximum capacity 5 kg and we have 4 items to choose from. Our intention is to maximize our profits while maintaining the total carry weight within 5 kg.`  
So how do we start?


#### Knapsack Code
###### The below implementation is *plain recursive* solution for the 0/1 knapsack problem.
***
``` java
public class knapsack {
    /**
     * Recursive method to compute knapsack solution
     * 
     * @param weights      is array of item weights
     * @param itemValues   is array of item values
     * @param W            is the maximum capacity of knapsack
     * @param currentIndex is the index of item we are currently processing
     * @return int the maximum value we can achieve given the params
     */
    public static int knapsack(int[] weights, 
                               int[] itemValues, 
                               int W, 
                               int currentIndex) {
        // if we have reached end of array, then we can't add any more value
        // hence we return value = 0
        if (currentIndex == weights.length) {
            return 0;
        }
        // now for each element we have a choice either we take it or we don't
        // Each decision leads to a separate path hence we solve for both
        int takeCurrentElement, notTakeCurrentElement;
        // we can only choose to include the current item in knapsack if its weight is
        // less than or equal to W
        if (weights[currentIndex] <= W) {
            takeCurrentElement = itemValues[currentIndex] + 
                                 knapsack(weights, 
                                          itemValues,
                                          W - weights[currentIndex], //the remaining capacity of knapsack
                                          currentIndex + 1); //we have processed this item so we move further
        } else {
            takeCurrentElement = 0; // if we can't include the current element then
                                    // this path is not possible and gives value 0
        }

        // if we choose to not include the current element then we simply continue our
        // search by excluding current element from our choices
        notTakeCurrentElement = knapsack(weights, 
                                         itemValues, 
                                         W, //here we didn't take the current item so knapsack can still carry W total weight
                                         currentIndex + 1); //we have processed this item so we move further

        //take maximum of both paths
        return Math.max(takeCurrentElement, notTakeCurrentElement); 
    }

    public static void main(String[] args) {
        int[] weights = new int[] { 5, 3, 1, 6};
        int[] itemValues = new int[] { 1, 12, 14, 30};
        int W = 5;
        int maxValuePossible = knapsack(weights, itemValues, W, 0);

        printPrettyArray(weights, "Item Weights");
        printPrettyArray(itemValues, "Item Values");
        printPrettyMessage(W, "KnapSack Capacity:");
        printPrettyMessage(maxValuePossible, "Max value possible:");
    }

    // helper methods to print pretty
    private static void printPrettyArray(int[] array, String message) {
        System.out.print(message + ": ");
        for (int a : array)
            System.out.print(a + " ");
        System.out.println();
    }

    private static void printPrettyMessage(int value, String message) {
        System.out.println(message + " " + value);
    }

}
```

It produces following output
``` txt
Item Weights: 5 3  1  6
Item Values:  1 12 14 30
KnapSack Capacity: 5
Max value possible: 26
```

###### Bottom Up DP solution for 0/1 knapsack
***
``` java
public class knapsack {
    /**
     * Recursive method to compute knapsack solution
     * 
     * @param weights      is array of item weights
     * @param itemValues   is array of item values
     * @param W            is the maximum capacity of knapsack
     * @param currentIndex is the index of item we are currently processing
     * @return int the maximum value we can achieve given the params
     */
    public static int knapsackDP(int[] itemWeights,
                                 int[] itemValues,
                                 int W, int currentIndex) {
        int[][]t = new int[itemWeights.length + 1][W + 1];

        //---------- initialization begin
        // the first row in t implies we have no items to choose from
        // no matter the capacity of the bag, so our max value = 0
        for(int j = 0; j <= W; j++) {
            t[0][j] = 0;
        }

        // the first column in t implies we have no knapsack to carry
        // the items (or in other words a knapsack with max weight = 0)
        // thus we can not get any value no matter the number of items
        // to choose fromm, so our max value = 0
        for(int i = 0; i <= itemWeights.length; i++) {
            t[i][0] = 0;
        }
        //---------- initialization complete
        for(int i = 1; i <= itemWeights.length; i++) {
            for(int j = 1; j <= W; j++) {
                if(itemWeights[i - 1] <= j) {
                    t[i][j] = Math.max(t[i - 1][j],
                                    itemValues[i - 1] + t[i - 1][j - itemWeights[i - 1]]);
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[itemWeights.length][W];
    }
    
    public static void main(String[] args) {
        int[] weights = new int[] { 5, 3, 1,6 };
        int[] itemValues = new int[] { 1, 12, 14,30 };
        int W = 5;
        int maxValuePossible = knapsackDP(weights, itemValues, W, 0);

        printPrettyArray(weights, "Item Weights");
        printPrettyArray(itemValues, "Item Values");
        printPrettyMessage(W, "KnapSack Capacity:");
        printPrettyMessage(maxValuePossible, "Max value possible:");
    }
    
    // helper methods to print pretty
    private static void printPrettyArray(int[] array, String message) {
        System.out.print(message + ": ");
        for (int a : array)
            System.out.print(a + " ");
        System.out.println();
    }

    private static void printPrettyMessage(int value, String message) {
        System.out.println(message + " " + value);
    }

}
```

### Problems

<!-- KaTeX -->{{< math.inline >}}
{{ if or .Page.Params.math .Site.Params.math }}
<!-- KaTeX -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.10.1/dist/katex.min.css" integrity="sha384-dbVIfZGuN1Yq7/1Ocstc1lUEm+AT+/rCkibIcC/OmWo5f0EA48Vf8CytHzGrSwbQ" crossorigin="anonymous">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.1/dist/katex.min.js" integrity="sha384-2BKqo+exmr9su6dir+qCw08N2ZKRucY4PrGQPPWU1A7FtlCGjmEGFqXCv5nyM5Ij" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
{{ end }}
{{</ math.inline >}}